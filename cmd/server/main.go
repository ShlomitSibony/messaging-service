// Package main provides the entry point for the messaging service
package main

import (
	"context"
	"os"
	"os/signal"
	"syscall"
	"time"

	"messaging-service/internal/app"
	"messaging-service/internal/config"
	"messaging-service/internal/logger"

	_ "messaging-service/docs" // This is generated by swag

	_ "github.com/lib/pq" // PostgreSQL driver

	"go.uber.org/zap"
)

// @title           Messaging Service API
// @version         1.0
// @description     A unified messaging service that supports SMS, MMS, and Email messaging with conversation management.
// @termsOfService  http://swagger.io/terms/

// @contact.name   API Support
// @contact.url    http://www.swagger.io/support
// @contact.email  support@swagger.io

// @license.name  Apache 2.0
// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html

// @host      localhost:8080
// @BasePath  /api

// @securityDefinitions.apikey ApiKeyAuth
// @in header
// @name Authorization

func main() {
	// Initialize logger
	logger.Init(true) // Set to false in production
	defer logger.Sync()

	log := logger.Get()
	log.Info("Starting messaging service")

	// Load configuration
	cfg, err := config.Load()
	if err != nil {
		log.Fatal("Failed to load configuration", zap.Error(err))
	}

	// Create and initialize the application
	application := app.NewApp(cfg)
	if err := application.Initialize(); err != nil {
		log.Fatal("Failed to initialize application", zap.Error(err))
	}

	// Start server in a goroutine
	go func() {
		if err := application.Start(); err != nil {
			log.Fatal("Failed to start server", zap.Error(err))
		}
	}()

	// Wait for interrupt signal to gracefully shutdown the server
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit
	log.Info("Shutting down server...")

	// Give outstanding requests a deadline for completion
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	if err := application.Shutdown(ctx); err != nil {
		log.Fatal("Server forced to shutdown", zap.Error(err))
	}

	log.Info("Server exited")
}
